# Configuration file
# key = value
#my.name=Evyatar

# Kubernetes ONLY
# these are for the kubernetes extension, used in mvn package for creating the kubernetes.yaml file
quarkus.container-image.group=evyatark
quarkus.application.name=quarkus-sample-app

# Kubernetes ONLY
# This tells Quarkus to integrate with Kubernetes configMap
# but they are used at build time (when executing mvn package)
# and require creating a configMap with kubectl create configmap my-file-config --from-file=...
# quarkus.kubernetes-config.enabled=true
# quarkus.kubernetes-config.config-maps=my-file-config


# for metrics
quarkus.resteasy.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true
quarkus.datasource.metrics.enabled=true
quarkus.datasource.health.enabled=true
quarkus.hibernate-orm.metrics.enabled=true
quarkus.hibernate-orm.statistics=true
quarkus.smallrye-metrics.extensions.enabled=true



# Configuration the PostgreSQL database

## when running quarkus:dev (and don't forget to run a docker container of postgresDB)
%dev.quarkus.datasource.url = jdbc:postgresql://localhost:5432/postgres

## when running in docker compose:
quarkus.datasource.url = jdbc:postgresql://postgres:5432/postgres

# Kubernetes ONLY
## when running in k8s:
# a configMap with another value of quarkus.datasource.url will override the "docker-compose" value.


quarkus.datasource.driver = org.postgresql.Driver
quarkus.datasource.username=postgres
quarkus.datasource.password=mypassword

# drop and create the database at startup (use `update` to only update the schema)
%dev.quarkus.hibernate-orm.database.generation = drop-and-create
quarkus.hibernate-orm.database.generation = update
